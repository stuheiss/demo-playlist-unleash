diff --git a/src/App.js b/src/App.js
index cc24f23..5b478fd 100644
--- a/src/App.js
+++ b/src/App.js
@@ -5,15 +5,21 @@ import ULClient from './unleash-js.js'

 const isNewer = (a, b) => Date.parse(a.added) < Date.parse(b.added)

-const flag = process.env.REACT_APP_FEATURE_FLAG
-const userId = process.env.REACT_APP_FEATURE_USERID
+const features = [
+  {
+    flag: 'test2',
+    strategies: [{ perUser: ['test2user', 'test2user2', 'test3user'] }]
+  },
+  { flag: 'test3.colorScheme' },
+  { flag: 'test3.powerUser' },
+  { flag: 'test3.timeSorting' }
+]

 class App extends Component {
   constructor() {
     super()
-    this.flag = flag
-    this.userId = userId
     this.state = {
+      features: features,
       selectedSortOrder: null,
       songs: [
         { name: 'Only One', added: '2017-11-27' },
@@ -25,42 +31,128 @@ class App extends Component {
   }
   componentDidMount() {
     this.ulclient = ULClient.initialize()
-    this.ulclient.on('ready', this.onUnleashUpdated.bind(this))
-    this.ulclient.on('change', this.onUnleashUpdated.bind(this))
+    this.ulclient.on('ready', this.onUnleashChange.bind(this))
+    this.ulclient.on('change', this.onUnleashChange.bind(this))
   }
-  onUnleashUpdated() {
-    this.ulclient.variation('test2', 'test2user').then(value => {
-      // only update state if value is boolean
-      // network error will NOT update state as flag value is undefined
-      // this will leave app in "Loading" until we get a boolean value
-      if (typeof value === 'boolean') {
-        this.setState({
-          featureFlags: {
-            defaultSortingIsAdded: value
-          }
-        })
-      }
-    })
+  onUnleashReady(event) {
+    // FIXME - ready event doesn't fire
+    console.log('onUnleashReady', event)
   }
-  render() {
-    if (!this.state.featureFlags) {
-      return <div className="App">Loading....</div>
-    }

-    let sorter
-    if (this.state.selectedSortOrder) {
-      if (this.state.selectedSortOrder === 'added') {
-        sorter = isNewer
-      } else if (this.state.selectedSortOrder === 'natural') {
-        sorter = undefined
-      }
+  updateFeatureState(flag, userId) {
+    console.log('updateFeatureState', flag, userId)
+    let pending = []
+    if (typeof flag === 'undefined') {
+      let features = this.state.features
+      features.map(feature => {
+        if (typeof feature.strategies === 'undefined') {
+          let enabled = this.ulclient.variation(feature.flag)
+          pending.push(enabled)
+          feature.enabled = enabled
+        } else {
+          feature.strategies.map(strategy => {
+            if (typeof strategy.perUser !== 'undefined') {
+              strategy.perUser.map(userId => {
+                let enabled = this.ulclient.variation(feature.flag, userId)
+                pending.push(enabled)
+                feature.enabled = enabled
+              })
+            }
+          })
+        }
+      })
+      Promise.all(pending).then(() => {
+        this.setState({ features: features })
+        console.log('UPDall', features)
+      })
+    } else {
+      //console.log('updateFS', flag, userId)
+      let enabled = this.ulclient.variation(flag, userId)
+      pending.push(enabled)
+      let features = this.state.features
+      let feature = features.filter(f => f.flag === flag)[0]
+      feature.enabled = enabled
+      let newFeatures = features.map(f => (f.flag === flag ? feature : f))
+      Promise.all(pending).then(() => {
+        this.setState({ features: newFeatures })
+        console.log('UPD1', features)
+      })
+    }
+  }
+  onUnleashChange(event) {
+    console.log('unUnleashChange event', event)
+    if (typeof event === 'undefined') {
+      console.log('unUnleashChange event not defined')
+    } else if (event === 'wakeup') {
+      this.updateFeatureState() // updates all defined features
     } else {
-      if (this.state.featureFlags.defaultSortingIsAdded) {
-        sorter = isNewer
-      } else {
-        sorter = undefined
-      }
+      this.updateFeatureState(event.flag, event.userId)
     }
+
+    if (false) {
+      this.state.features.map(feature => {
+        //console.log('mapFeatures', feature.flag)
+        if (!feature.hasOwnProperty('strategies')) {
+          let value = this.ulclient.variation(feature.flag)
+          if (typeof value !== 'undefined') {
+            value.then(enabled => {
+              //console.log('feature', feature.flag, enabled)
+            })
+          }
+        } else {
+          feature.strategies.map(strategy => {
+            if (strategy.hasOwnProperty('perUser')) {
+              strategy.perUser.map(userId => {
+                let value = this.ulclient.variation(feature.flag, userId)
+                if (typeof value !== 'undefined') {
+                  value.then(enabled => {
+                    //console.log('feature', feature.flag, userId, enabled)
+                  })
+                }
+                return null
+              })
+            }
+            return null
+          })
+        }
+        return null
+      })
+    }
+  }
+  render() {
+    // console.log('state', this.state)
+    console.log('render features', this.state.features)
+
+    // if (!this.state.featureFlags) {
+    //   return <div className="App">Loading....</div>
+    // }
+
+    return (
+      <div>
+        <table>
+          <tbody>
+            {[0, 1, 2, 3].map((n, i) => (
+              <tr key={i}>
+                <td>
+                  {n} {this.state.features[n].flag}{' '}
+                  {this.state.features[n].enabled ? 'True' : 'False'}{' '}
+                  {typeof this.state.features[n].enabled}
+                </td>
+              </tr>
+            ))}
+          </tbody>
+        </table>
+      </div>
+    )
+
+    let sorter = undefined
+
+    // if (this.state.featureFlags.defaultSortingIsAdded) {
+    //   sorter = isNewer
+    // } else {
+    //   sorter = undefined
+    // }
+
     return (
       <div className="App">
         <div style={{ textAlign: 'left' }}>
diff --git a/src/unleash-js.js b/src/unleash-js.js
index a15b71e..2ac3cad 100644
--- a/src/unleash-js.js
+++ b/src/unleash-js.js
@@ -1,13 +1,17 @@
 var fetch = require('node-fetch')
 var EventEmitter = require('./EventEmitter')
 const VERSION = '0.0.1'
+require('dotenv').config()

 function initialize() {
   var readyEvent = 'ready'
   var changeEvent = 'change'
   var emitter
-  var state = {}
+  var state = { features: [] }
   var pollerRunning = false
+  var api = `http://${process.env.REACT_APP_UNLEASH_PROXY_HOST}:${
+    process.env.REACT_APP_UNLEASH_PROXY_PORT
+  }/api`

   emitter = EventEmitter()

@@ -31,54 +35,73 @@ function initialize() {

   function startPoller() {
     setInterval(() => {
-      if (state !== {}) {
-        setState({
-          flag: state.flag,
-          userId: state.userId,
-          enabled: isEnabled(state.flag, state.userId)
+      state.features.map(feature => {
+        let enabled = isEnabled(feature.flag, feature.userId)
+        Promise.all([feature.enabled, enabled]).then(values => {
+          if (values[0] !== values[1]) {
+            emitter.emit(changeEvent, feature)
+          }
         })
-      }
+        feature.enabled = enabled
+        return null
+      })
     }, 5000)
   }

   function isEnabled(flag, userId) {
-    let enabled = fetch(
-      'http://localhost:3004/api/flag/' + flag + '/userId/' + userId
-    )
+    let url = `${api}/flag/${flag}`
+    if (userId !== undefined) {
+      url = url + '/userId/' + userId
+    }
+    let enabled = fetch(url)
       .then(res => res.json())
       .then(json => {
         return json
       })
       .catch(err => {
-        console.log('fetch error', err)
+        console.log('ERROR:FETCH', err)
         return undefined
       })
     return enabled
   }

+  // queue up the feature if necessary, else return its state
   function variation(flag, userId) {
-    var enabled = isEnabled(flag, userId)
-    setState({
+    if (featureExists(flag, userId)) {
+      return featureEnabled(flag, userId)
+    } else {
+      // queue up this variation
+      enqueueFeature(flag, userId)
+      // return a promise of undefined
+      return makePromise(undefined)
+    }
+  }
+
+  function enqueueFeature(flag, userId) {
+    state.features.push({
       flag: flag,
       userId: userId,
-      enabled: enabled
+      enabled: undefined
     })
-    return enabled
   }

-  function setState(newState) {
sheiss:s001 in ~/src/js/playground/demo-playlist-unleash on dev*⚡ git checkout master
M	src/App.js
M	src/unleash-js.js
M	src/unleash-proxy.js
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
sheiss:s001 in ~/src/js/playground/demo-playlist-unleash on master*⚡ git diff
diff --git a/src/App.js b/src/App.js
index cc24f23..50178d6 100644
--- a/src/App.js
+++ b/src/App.js
@@ -5,15 +5,21 @@ import ULClient from './unleash-js.js'

 const isNewer = (a, b) => Date.parse(a.added) < Date.parse(b.added)

-const flag = process.env.REACT_APP_FEATURE_FLAG
-const userId = process.env.REACT_APP_FEATURE_USERID
+const features = [
+  {
+    flag: 'test2',
+    strategies: [{ perUser: ['test2user', 'test2user2', 'test3user'] }]
+  },
+  { flag: 'test3.colorScheme' },
+  { flag: 'test3.powerUser' },
+  { flag: 'test3.timeSorting' }
+]

 class App extends Component {
   constructor() {
     super()
-    this.flag = flag
-    this.userId = userId
     this.state = {
+      features: features,
       selectedSortOrder: null,
       songs: [
         { name: 'Only One', added: '2017-11-27' },
@@ -25,42 +31,135 @@ class App extends Component {
   }
   componentDidMount() {
     this.ulclient = ULClient.initialize()
-    this.ulclient.on('ready', this.onUnleashUpdated.bind(this))
-    this.ulclient.on('change', this.onUnleashUpdated.bind(this))
+    this.ulclient.on('ready', this.onUnleashChange.bind(this))
+    this.ulclient.on('change', this.onUnleashChange.bind(this))
   }
-  onUnleashUpdated() {
-    this.ulclient.variation('test2', 'test2user').then(value => {
-      // only update state if value is boolean
-      // network error will NOT update state as flag value is undefined
-      // this will leave app in "Loading" until we get a boolean value
-      if (typeof value === 'boolean') {
-        this.setState({
-          featureFlags: {
